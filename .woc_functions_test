#!/usr/bin/env bash

#Bash functions for the WhatsOnChain API
#Use at your own risk
#https://developers.whatsonchain.com/#introduction

#$ wget https://raw.githubusercontent.com/bitsko/Whats-On-Chain-API-for-Bash/main/.woc_functions

#add these functions to your shell session by typing:
#$ source .woc_functions

#give them persistence by sourcing them in .bashrc
#if [ -f ~/.woc_functions ]; then
#    . ~/.woc_functions
#fi

#after sourcing the functions, print the message below with"
#woc
woc(){
echo "https://developers.whatsonchain.com/"
curl -s -w "\n\n" "https://api.whatsonchain.com/v1/bsv/main/woc"
echo "      #####         #####  ,,,,,,,,,,,,,,,   #################"
echo "    ######          ######  ,,,,,,,,,,,,,  #####################"
echo "   #####              ##### ,,,,,,,,,,,,, #######################"
echo "  #####              ,,, ###             ### ,,,             ####"
echo "  #####      ####   ,,,, ###             ### ,,,,"
echo "  #####      ####   ,,,, ###             ### ,,,,"
echo "   #####     ####    ,,,, #               # ,,,,             ####"
echo "    ################# ,,,,,,,,,,,,,,,,,,,,,,,,,, ################"
echo "     #################  ,,,,,,,,,,,,,,,,,,,,,,, ################"
echo "       #################  ,,,,,,,,,,,,,,,,,,,  ###############"$'\n'
echo "woc_info - Retrieves information about the state of the chain for the selected network"
echo "woc_circulatingsupply - Retrieves the circulating supply of BSV"
echo "woc_tips - Retrieves information about all known tips in the block tree"
echo "woc_blockhash - Retrieves the block details of a given hash"
echo "woc_height - Retrieves the block details of a given block height"
echo "woc_getblockcount - Posts the current block number"
echo "woc_currentblockinfo - Retrieves the block details of the current block"
echo "woc_pages - Get pages of transactions from a block"
echo "woc_headerbyhash - Retrieves the block header details of a given hash"
echo "woc_headers - Retrieves the last 10 block headers"
echo "woc_txhash - Retrieves the transaction details for a given transaction hash"
echo "woc_broadcast - Broadcast a transaction"
echo "woc_bulk - Fetch details for multiple transactions in single request (20 max)"
echo "woc_bulktxstatus - Get multiple transactions status in a single request (20 max)"
echo "woc_decode - Decode raw transaction with json in response or error msg from node"
echo "woc_receipt - Download transaction receipt (PDF)"
echo "woc_hex - Returns raw hex for the transaction with given hash"
echo "woc_bulkhex - Get multiple transactions raw data in hex in a single request (20 max)"
echo "woc_merkleproof - Returns the merkle branch for a confirmed transaction"
echo "woc_mempoolinfo - Retrieves various info about the node's mempool for the selected network"
echo "woc_mempoolraw - Retrieve a list of transaction ids from the node's mempool for the selected network"
echo "woc_addressinfo - Retrieves various address info"
echo "woc_addressbalance - Retrieves the confirmed and unconfirmed address balance"
echo "woc_bulkbalance - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)"
echo "woc_addresshistory - Retrieves confirmed and unconfirmed address transactions"
echo "woc_unspent - Retrieves ordered list of UTXOs"
echo "woc_bulkunspent - Fetch UTXOs for multiple addresses in a single request (20 max)"
echo "woc_statement - Download address statement (PDF)"
echo "woc_scripthistory - Retrieves confirmed and unconfirmed script transactions"
echo "woc_scriptunspent - This endpoint retrieves ordered list of UTXOs"
echo "woc_bulkscriptunspent - Fetch UTXOs for multiple scripts in a single request (20 max)"
echo "woc_exchangerate - This endpoint provides exchange rate for BSV"
echo "woc_usd - Retrieves the USD price of BSV and posts the date"
echo "woc_getlinks - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links"
echo "woc_help - Examples of use"
echo "woc_newrandtx"
}
woc_help(){
echo "woc_info - Retrieves information about the state of the chain for the selected network"$'\n'\
"Examples:"$'\n'"woc_info"$'\n'"woc_info test"$'\n'"woc_info stn"$'\n\n'\
"woc_circulatingsupply - Retrieves the circulating supply of BSV"$'\n'\
"Example:"$'\n'"woc_circulatingsupply"$'\n\n'\
"woc_tips - Retrieves information about all known tips in the block tree"$'\n'\
"Example:"$'\n'"woc_tips"$'\n'"woc_tips stn"$'\n\n'\
"woc_blockhash - Retrieves the block details of a given hash"$'\n'\
"Example:"$'\n'\
"woc_blockhash 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"$'\n\n'\
"woc_height - Retrieves the block details of a given block height"$'\n'\
"Examples:"$'\n'"woc_height 0"$'\n'"woc_height 1 stn"$'\n\n'\
"woc_getblockcount - Retrieves the current block height"$'\n'\
"Example:"$'\n'"woc_getblockcount"$'\n\n'\
"woc_currentblockinfo - Retrieves the block details of the current block height"$'\n'\
"Example:"$'\n'"woc_currentblockinfo"$'\n\n'\
"woc_pages - Get pages of transactions from a block"$'\n'\
"Example:"$'\n'\
"woc_pages 000000000000000000885a4d8e9912f085b42288adc58b3ee5830a7da9f4fef4 2"$'\n\n'\
"woc_headerbyhash - Retrieves the block header details of a given hash"$'\n'\
"Example:"$'\n'\
"woc_headerbyhash 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"$'\n'\
"woc_headerbyhash 000000000556e364bb9bb45adf587734ed1becd48a8978ad700f8344cf72481c stn"$'\n\n'\
"woc_headers - Retrieves the last 10 block headers"$'\n'\
"Example:"$'\n'"woc_headers"$'\n'"woc_headers test"$'\n\n'\
"woc_txhash - Retrieves the transaction details for a given transaction hash"$'\n'\
"Example:"$'\n'"woc_txhash 0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098"$'\n'\
"woc_txhash 72c6c856d7a1cf34889be3aa13160d0ab2335236420e944099fefe180172f4aa stn"$'\n\n'\
"woc_broadcast - Broadcast a transaction"$'\n'\
"Example:"$'\n'\
"woc_broadcast 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000"$'\n\n'\
"woc_bulk - Fetch details for multiple transactions in single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulk \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"'$'\n\n'\
"woc_bulktxstatus - Get multiple transactions status in a single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulktxstatus \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"'$'\n\n'\
"woc_decode - Decode raw transaction with json in response or error msg from node"$'\n'\
"Example:"$'\n'\
"woc_decode 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000"$'\n\n'\
"woc_receipt - Download transaction receipt (PDF)"$'\n'\
"Example:"$'\n'\
"woc_receipt 3c7478a74b180cb4784e86d33d40b48968898ee15851dd133e46e04038c9b963"$'\n\n'\
"woc_hex - Returns raw hex for the transaction with given hash"$'\n'\
"Example:"$'\n'"woc_hex 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa"$'\n\n'\
"woc_bulkhex - Get multiple transactions raw data in hex in a single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulkhex \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"'$'\n\n'\
"woc_merkleproof - Returns the merkle branch for a confirmed transaction"$'\n'\
"Example:"$'\n'"woc_merkleproof 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa"$'\n\n'\
"woc_mempoolinfo - Retrieves various info about the node's mempool for the selected network"$'\n'\
"Example:"$'\n'"woc_mempoolinfo"$'\n'"woc_mempoolinfo test"$'\n\n'\
"woc_mempoolraw - Retrieve a list of transaction ids from the node's mempool for the selected network"$'\n'\
"Example:"$'\n'"woc_mempoolraw"$'\n'"woc_mempoolraw test"$'\n\n'\
"woc_addressinfo - Retrieves various address info"$'\n'\
"Example:"$'\n'"woc_addressinfo 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"$'\n'\
"woc_addressinfo n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn"$'\n\n'\
"woc_addressbalance - Retrieves the confirmed and unconfirmed address balance"$'\n'\
"Example:"$'\n'"woc_addressbalance 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"$'\n'\
"woc_addressbalance n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn"$'\n\n'\
"woc_bulkbalance - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulkbalance \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"'$'\n\n'\
"woc_addresshistory - Retrieves confirmed and unconfirmed address transactions"$'\n'\
"Example:"$'\n'\
'woc_addresshistory 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX'$'\n'\
"woc_addresshistory n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn"$'\n\n'\
"woc_unspent - Retrieves ordered list of UTXOs"$'\n'\
"Example:"$'\n'"woc_unspent 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"$'\n'\
"woc_unspent n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn"$'\n\n'\
"woc_bulkunspent - Fetch UTXOs for multiple addresses in a single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulkunspent \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"'$'\n\n'\
"woc_statement - Download address statement (PDF)"$'\n'\
"Example:"$'\n'\
"woc_statement 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX"$'\n\n'\
"woc_scripthistory - Retrieves confirmed and unconfirmed script transactions"$'\n'\
"Example:"$'\n'\
"woc_scripthistory f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7"$'\n\n'\
"woc_scriptunspent - This endpoint retrieves ordered list of UTXOs"$'\n'\
"Example:"$'\n'\
"woc_scriptunspent f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7"$'\n\n'\
"woc_bulkscriptunspent - Fetch UTXOs for multiple scripts in a single request (20 max)"$'\n'\
"Example:"$'\n'\
'woc_bulkscriptunspent \"f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7\",\"995ea8d0f752f41cdd99bb9d54cb004709e04c7dc4088bcbbbb9ea5c390a43c3\"'$'\n\n'\
"woc_exchangerate - This endpoint provides exchange rate for BSV"$'\n'\
"Example:"$'\n'"woc_exchangerate"$'\n\n'\
"woc_usd - Retrieves the USD price of BSV and posts the date"$'\n'\
"Example:"$'\n'"woc_usd" $'\n\n'\
"woc_getlinks - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links"$'\n'\
"Example:"$'\n'"woc_getlinks 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"$'\n'
}
hashVar(){ if [[ -p "/dev/stdin" ]]; then hash="$(cat)"; else
        hash="$1"; if [[ -z "$1" ]]; then echo "provide a hash as \$1 or pipe in a hash"; exit 1; fi; fi
}
inputVar(){ if [[ -z "$1" ]]; then  echo "missing input"; return; fi
}
netVar1(){ net=main; if [[ "$1" == "test" ]]; then net=test; fi; if [[ "$1" == "stn" ]]; then net=stn; fi
}
netVar2(){ net=main; if [[ "$2" == "test" ]]; then net=test; fi; if [[ "$2" == "stn" ]]; then net=stn; fi
}
netVar3(){ net=main; if [[ "$3" == "test" ]]; then net=test; fi; if [[ "$3" == "stn" ]]; then net=stn; fi
}
woc_helper(){ woc_help | less
}
woc_jqcheck(){ jq --version
command -v jq >/dev/null 2>&1 || { echo >&2 "please install jq"; exit 1; }
}
woc_info(){ netVar1
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/chain/info") | jq
}
woc_circulatingsupply(){ netVar1
curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/circulatingsupply"
}
woc_tips(){ netVar1
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/chain/tips") | jq
}
woc_blockhash(){ netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/block/hash/$hash") | jq
}
woc_height(){ netVar2
if [[ -p "/dev/stdin" ]]; then height="$(cat)"; else
        height="$1"; if [[ -z "$1" ]]; then echo "provide a height as \$1 or pipe in a height"; exit 1; fi; fi
wocHeight=$(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/block/height/$height")
echo "$wocHeight" | jq
truncateCheck=$(echo "$wocHeight" | jq | grep '"isTruncated": true' | awk '{ print $2 }')
if [[ "$truncateCheck" == "true" ]]; then echo $'\n'"Output is Truncated."$'\n'; return; fi
if [[ -z "$wocHeight" ]]; then echo "Block not found. Chain is $(woc_info | jq .blocks) blocks long"; return; fi
}
woc_getblockcount(){ netVar1
woc_info | jq .blocks
}
woc_currentblockinfo(){
woc_height $(woc_getblockcount)
}
woc_current100tx(){
woc_currentblockinfo | jq .tx | sed 's/"//g;s/,//g;s/[[]//g;s/[]]//g;/^$/d;s/ //g'
}
woc_pages(){ inputVar; netVar3
echo $(curl -s --location --request GET  "https://api.whatsonchain.com/v1/bsv/$net/block/hash/$1/page/$2") | jq
}
woc_headerbyhash(){ hashVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/block/$hash/header") | jq
}
woc_headers(){ netVar1
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/block/headers") | jq
}
woc_txhash(){ hashVar; netVar2
txHash=$(curl -s --location --request GET  "https://api.whatsonchain.com/v1/bsv/$net/tx/hash/$hash")
echo "$txHash" | jq
truncateCheck=$(echo "$txHash" | jq | grep '"isTruncated": true' | awk '{ print $2 }')
if [[ "$truncateCheck" == "true" ]]; then echo $'\n'"Output is Truncated. Use:"$'\n'"woc_rawtxout $1"$'\n'; return; fi
if [[ -z "$txHash" ]]; then echo "Transaction hash not found. try:"$'\n'"woc_txhash $1 test"$'\n'"or"$'\n'"woc_txhash $1 stn"; return; fi
}
woc_broadcast(){ inputVar; netVar2
curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/tx/raw" \
  --header "Content-Type: application/json" \
  --data "{\"txhex\": \"$1\" }"
}
woc_bulk(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs" \
  --header "Content-Type: application/json" \
  --data "{\"txids\" : ["$1"] }") | jq
}
woc_bulktxstatus(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs/status" \
  --header "Content-Type: application/json" \
  --data "{\"txids\" : ["$1" ] }") | jq
}
woc_decode(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/tx/decode" \
  --header "Content-Type: application/json" \
  --data "{\"txhex\": \"$1\" }") | jq
}
woc_receipt(){ inputVar
read -r -p "What do you want to name the receipt?"$'\n>' name
curl -s --location --request GET  "https://main.whatsonchain.com/receipt/$1" > "$name".pdf
}
woc_hex(){ inputVar; netVar2
echo $(curl -s --location --request GET  "https://api.whatsonchain.com/v1/bsv/$net/tx/$1/hex")
}
woc_bulkhex(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs/hex" \
  --header "Content-Type: application/json" \
  --data "{\"txids\" : ["$1" ] }") | jq
}
woc_rawtxout(){ hashVar; netVar3
voutCount=0; if [[ -n "$2" ]]; then voutCount="$2"; fi
curl -s --location --request GET  "https://api.whatsonchain.com/v1/bsv/$net/tx/$hash/out/$voutCount/hex"
}
woc_merkleproof(){ hashVar; netVar2
echo $(curl -s --location --request GET  "https://api.whatsonchain.com/v1/bsv/$net/tx/$hash/proof") | jq
}
woc_mempoolinfo(){ netVar1
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/mempool/info") | jq
}
woc_mempoolraw(){ netVar1
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/mempool/raw") | jq
}
woc_addressinfo(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/address/$1/info") | jq
}
woc_addressbalance(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/address/$1/balance") | jq
}
woc_bulkbalance(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/addresses/balance" \
  --header "Content-Type: application/json" \
  --data "{\"addresses\" : ["$1" ] }") | jq
}
woc_addresshistory(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/address/$1/history") | jq
}
woc_unspent(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/address/$1/unspent") | jq
}
woc_bulkunspent(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/addresses/unspent" \
  --header "Content-Type: application/json" \
  --data "{\"addresses\" : ["$1" ] }") | jq
}
woc_statement(){ inputVar
read -r -p "What do you want to name the statement?"$'\n>' name
curl -s --location --request GET  "https://main.whatsonchain.com/statement/$1" > "$name".pdf
}
woc_scripthistory(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/script/$1/history") | jq
}
woc_scriptunspent(){ inputVar; netVar2
echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/$net/script/$1/unspent") | jq
}
woc_bulkscriptunspent(){ inputVar; netVar2
echo $(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/scripts/unspent" \
  --header "Content-Type: application/json" \
  --data "{\"scripts\" : ["$1" ] }") | jq
}
woc_exchangerate(){ echo $(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/main/exchangerate") | jq
}
woc_usd(){ currency=$(woc_exchangerate | jq .currency)
rate=$(woc_exchangerate | jq .rate | cut -c -6)
echo BSV is "$rate" "$currency". $(date) | sed 's/"//g'
}
woc_getlinks(){ inputVar
links="curl -s -X POST https://api.whatsonchain.com/v1/bsv/main/search/links -H 'Content-Type: application/json' -d '{ \"query\": \"$1\" }' | jq"
echo "$links" | bash
}
woc_newrandtx(){ woc_current100tx | shuf -n 1
}
