#!/usr/bin/env bash

# Bash functions for the WhatsOnChain API
# Use at your own risk
# https://developers.whatsonchain.com/#introduction

# dependencies: jq, curl, grep, awk

# $ wget https://raw.githubusercontent.com/bitsko/Whats-On-Chain-API-for-Bash/main/.woc_functions_test

# add these functions to your shell session by typing:
# $ source .woc_functions_test

# give them persistence by sourcing them in .bashrc
# if [ -f ~/.woc_functions ]; then
#    . ~/.woc_functions
# fi

# after sourcing the functions, print the listing of functions with:
# $ woc
# find examples of use with:
# $ woc_help

tput_coloring(){
	[[ -z $(command -v tput) ]] && echo "requires tput" && return
	red_text=$(tput setaf 1)
	wht_text=$(tput setaf 7)
	blu_text=$(tput setaf 4)
	reg_text=$(tput sgr0)
	grn_text=$(tput setaf 2)
	bld_text=$(tput bold)
	ylw_text=$(tput setaf 3)
}
tput_coloring

woc(){
cat << WHATSONCHAINFORBASH
${grn_text}https://developers.whatsonchain.com/
${blu_text}Whats On Chain${reg_text}
${blu_text}${bld_text}
      #####         #####  ,,,,,,,,,,,,,,,   #################
    ######          ######  ,,,,,,,,,,,,,  #####################
   #####              ##### ,,,,,,,,,,,,, #######################
  #####              ,,, ###             ### ,,,             ####
  #####      ####   ,,,, ###             ### ,,,,
  #####      ####   ,,,, ###             ### ,,,,
   #####     ####    ,,,, #               # ,,,,             ####
    ################# ,,,,,,,,,,,,,,,,,,,,,,,,,, ################
     #################  ,,,,,,,,,,,,,,,,,,,,,,, ################
       #################  ,,,,,,,,,,,,,,,,,,,  ###############
${reg_text}
${bld_text}woc_info${reg_text} - Retrieves information about the state of the chain for the selected network
${bld_text}woc_circulatingsupply${reg_text} - Retrieves the circulating supply of BSV
${bld_text}woc_tips${reg_text} - Retrieves information about all known tips in the block tree
${bld_text}woc_blockhash${reg_text} - Retrieves the block details of a given hash
${bld_text}woc_getblockhash${reg_text} - Retrieves the block hash by block height
${bld_text}woc_height${reg_text} - Retrieves the block details of a given block height
${bld_text}woc_getblockcount${reg_text} - Posts the current block number
${bld_text}woc_currentblockinfo${reg_text} - Retrieves the block details of the current block
${bld_text}woc_pages${reg_text} - Get pages of transactions from a block
${bld_text}woc_headerbyhash${reg_text} - Retrieves the block header details of a given hash
${bld_text}woc_headers${reg_text} - Retrieves the last 10 block headers
${bld_text}woc_txhash${reg_text} - Retrieves the transaction details for a given transaction hash
${bld_text}woc_broadcast${reg_text} - Broadcast a transaction
${bld_text}woc_bulk${reg_text} - Fetch details for multiple transactions in single request (20 max)
${bld_text}woc_bulktxstatus${reg_text} - Get multiple transactions status in a single request (20 max)
${bld_text}woc_decode${reg_text} - Decode raw transaction with json in response or error msg from node
${bld_text}woc_receipt${reg_text} - Download transaction receipt (PDF)
${bld_text}woc_hex${reg_text} - Returns raw hex for the transaction with given hash
${bld_text}woc_bulkhex${reg_text} - Get multiple transactions raw data in hex in a single request (20 max)
${bld_text}woc_merkleproof${reg_text} - Returns the merkle branch for a confirmed transaction
${bld_text}woc_mempoolinfo${reg_text} - Retrieves various info about the node's mempool for the selected network
${bld_text}woc_mempoolraw${reg_text} - Retrieve a list of transaction ids from the node's mempool for the selected network
${bld_text}woc_addressinfo${reg_text} - Retrieves various address info
${bld_text}woc_addressbalance${reg_text} - Retrieves the confirmed and unconfirmed address balance
${bld_text}woc_bulkbalance${reg_text} - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)
${bld_text}woc_addresshistory${reg_text} - Retrieves confirmed and unconfirmed address transactions
${bld_text}woc_unspent${reg_text} - Retrieves ordered list of UTXOs
${bld_text}woc_bulkunspent${reg_text} - Fetch UTXOs for multiple addresses in a single request (20 max)
${bld_text}woc_statement${reg_text} - Download address statement (PDF)
${bld_text}woc_scripthistory${reg_text} - Retrieves confirmed and unconfirmed script transactions
${bld_text}woc_scriptunspent${reg_text} - This endpoint retrieves ordered list of UTXOs
${bld_text}woc_bulkscriptunspent${reg_text} - Fetch UTXOs for multiple scripts in a single request (20 max)
${bld_text}woc_exchangerate${reg_text} - This endpoint provides exchange rate for BSV
${bld_text}woc_usd${reg_text} - Retrieves the USD price of BSV and posts the date
${bld_text}woc_getlinks${reg_text} - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links
${bld_text}woc_help${reg_text} - Examples of use
${bld_text}woc_newrandtx${reg_text}
${bld_text}woc_current100tx${reg_text}
${bld_text}woc_ratecalc${reg_text}
${bld_text}woc_currentblockinfo${reg_text}
${bld_text}woc_lastblocktime${reg_text} - prints the difference in seconds to last block time, or with -h, difference in minutes
${blk_text}woc_readcoinbase${reg_text} - finds and prints text strings in the coinbase given a block hash
WHATSONCHAINFORBASH
}

woc_help(){
cat << WOCHELP
### WHATS ON CHAIN FOR BASH HELP DOC ###
${bld_text}woc_info - Retrieves information about the state of the chain for the selected network

${grn_text}Examples:
${ylw_text}woc_info
woc_info test
woc_info stn
${reg_text}
${bld_text}woc_circulatingsupply - Retrieves the circulating supply of BSV

${grn_text}Example:
${ylw_text}woc_circulatingsupply
${reg_text}
${bld_text}woc_tips - Retrieves information about all known tips in the block tree

${grn_text}Example:
${ylw_text}woc_tips
woc_tips stn
${reg_text}
${bld_text}woc_blockhash - Retrieves the block details of a given hash

${grn_text}Example:
${ylw_text}woc_blockhash 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
${reg_text}
${bld_text}woc_height - Retrieves the block details of a given block height

${grn_text}Examples:
${ylw_text}woc_height 0
woc_height 1 stn
${reg_text}
${bld_text}woc_getblockcount - Retrieves the current block height

${grn_text}Example:
${ylw_text}woc_getblockcount
${reg_text}
${bld_text}woc_currentblockinfo - Retrieves the block details of the current block height

${grn_text}Example:
${ylw_text}woc_currentblockinfo
${reg_text}
${bld_text}woc_pages - Get pages of transactions from a block

${grn_text}Example:
${ylw_text}woc_pages 000000000000000000885a4d8e9912f085b42288adc58b3ee5830a7da9f4fef4 2
${reg_text}
${bld_text}woc_headerbyhash - Retrieves the block header details of a given hash

${grn_text}Example:
${ylw_text}woc_headerbyhash 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048
woc_headerbyhash 000000000556e364bb9bb45adf587734ed1becd48a8978ad700f8344cf72481c stn
${reg_text}
${bld_text}woc_headers - Retrieves the last 10 block headers

${grn_text}Example:
${ylw_text}woc_headers
woc_headers test
${reg_text}
${bld_text}woc_txhash - Retrieves the transaction details for a given transaction hash

${grn_text}Example:
${ylw_text}woc_txhash 0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098
woc_txhash 72c6c856d7a1cf34889be3aa13160d0ab2335236420e944099fefe180172f4aa stn
${reg_text}
${bld_text}woc_broadcast - Broadcast a transaction

${grn_text}Example:
${ylw_text}woc_broadcast 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000
${reg_text}
${bld_text}woc_bulk - Fetch details for multiple transactions in single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulk \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"
${reg_text}
${bld_text}woc_bulktxstatus - Get multiple transactions status in a single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulktxstatus \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"
${reg_text}
${bld_text}woc_decode - Decode raw transaction with json in response or error msg from node

${grn_text}Example:
${ylw_text}woc_decode 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000
${reg_text}
${bld_text}woc_receipt - Download transaction receipt (PDF)

${grn_text}Example:
${ylw_text}woc_receipt 3c7478a74b180cb4784e86d33d40b48968898ee15851dd133e46e04038c9b963
${reg_text}
${bld_text}woc_hex - Returns raw hex for the transaction with given hash

${grn_text}Example:
${ylw_text}woc_hex 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa
${reg_text}
${bld_text}woc_bulkhex - Get multiple transactions raw data in hex in a single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulkhex \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"
${reg_text}
${bld_text}woc_merkleproof - Returns the merkle branch for a confirmed transaction

${grn_text}Example:
${ylw_text}woc_merkleproof 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa
${reg_text}
${bld_text}woc_mempoolinfo - Retrieves various info about the node's mempool for the selected network

${grn_text}Example:
${ylw_text}woc_mempoolinfo
woc_mempoolinfo test
${reg_text}
${bld_text}woc_mempoolraw - Retrieve a list of transaction ids from the node's mempool for the selected network

${grn_text}Example:
${ylw_text}woc_mempoolraw
woc_mempoolraw test
${reg_text}
${bld_text}woc_addressinfo - Retrieves various address info

${grn_text}Example:
${ylw_text}woc_addressinfo 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_addressinfo n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn
${reg_text}
${bld_text}woc_addressbalance - Retrieves the confirmed and unconfirmed address balance

${grn_text}Example:
${ylw_text}woc_addressbalance 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_addressbalance n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn
${reg_text}
${bld_text}woc_bulkbalance - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulkbalance \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"
${reg_text}
${bld_text}woc_addresshistory - Retrieves confirmed and unconfirmed address transactions

${grn_text}Example:
${ylw_text}woc_addresshistory 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX
woc_addresshistory n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn
${reg_text}
${bld_text}woc_unspent - Retrieves ordered list of UTXOs

${grn_text}Example:
${ylw_text}woc_unspent 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_unspent n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn
${reg_text}
${bld_text}woc_bulkunspent - Fetch UTXOs for multiple addresses in a single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulkunspent \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"
${reg_text}
${bld_text}woc_statement - Download address statement (PDF)

${grn_text}Example:
${ylw_text}woc_statement 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX
${reg_text}
${bld_text}woc_scripthistory - Retrieves confirmed and unconfirmed script transactions

${grn_text}Example:
${ylw_text}woc_scripthistory f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7
${reg_text}
${bld_text}woc_scriptunspent - This endpoint retrieves ordered list of UTXOs

${grn_text}Example:
${ylw_text}woc_scriptunspent f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7
${reg_text}
${bld_text}woc_bulkscriptunspent - Fetch UTXOs for multiple scripts in a single request (20 max)

${grn_text}Example:
${ylw_text}woc_bulkscriptunspent \"f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7\",\"995ea8d0f752f41cdd99bb9d54cb004709e04c7dc4088bcbbbb9ea5c390a43c3\"
${reg_text}
${bld_text}woc_exchangerate - This endpoint provides exchange rate for BSV

${grn_text}Example:
${ylw_text}woc_exchangerate
${reg_text}
${bld_text}woc_usd - Retrieves the USD price of BSV and posts the date

${grn_text}Example:
${ylw_text}woc_usd
${reg_text}
${bld_text}woc_getlinks - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links

${grn_text}Example:
${ylw_text}woc_getlinks 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa${reg_text}
WOCHELP
}
##############################################################################################################################

woc_curl_GET(){
        curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/${woc_net_}${1}"
}

woc_jq_GET(){
	jq<<<$(woc_curl_GET ${1})
}

woc_helper(){
        woc_help | less
}

woc_jqcheck(){
        jq --version
        command -v jq >/dev/null 2>&1 || { echo >&2 "please install jq"
                return
        }
}

woc_functionlist(){
	declare -F | grep "woc_" | awk '{ print $3 }' | grep -v GET
}

##############################################################################################################################

woc_info(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/chain/info"
}

woc_circulatingsupply(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
        woc_curl_GET "/circulatingsupply"
}

woc_tips(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/chain/tips"
}

woc_blockhash(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/block/hash/$1"
}

woc_getblockhash(){
	woc_height $1 | jq -r .coinbaseTx.blockhash | head -n 1
}

woc_height(){
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        if [[ -p "/dev/stdin" ]]; then
		woc_height="$(cat)"
	else
                woc_height="$1"
                if [[ -z "$1" ]]; then
			echo "provide a height as \$1 or pipe in a height"
			return
		fi
	fi
        wocHeight=$(woc_jq_GET "/block/height/$woc_height")
        jq<<<"$wocHeight"
        truncateCheck=$(jq<<<"$wocHeight" | grep '"isTruncated": true' | awk '{ print $2 }')
        if [[ "$truncateCheck" == "true" ]]; then
		echo $'\n'"Output is Truncated."$'\n'
		return
	fi
        txcount="$(jq .txcount<<<$wocHeight)"
        if [[ $(jq .tx<<<"$wocHeight" | wc -l) == 102 ]] && [[ "$txcount" != 100 ]]; then
                echo "{"$'\n'"\"tx_isTruncated\": \"true\""$'\n'"}"
		return
	fi
        if [[ -z "$wocHeight" ]]; then
		echo "Block not found. Chain is $(woc_info | jq .blocks) blocks long"
		return
	fi
}

woc_pages(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$3" == "test" ]] && woc_net_=test
        [[ "$3" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/block/hash/$1/page/$2"
}

woc_headerbyhash(){
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        if [[ -p "/dev/stdin" ]]; then
                woc_hash_="$(cat)"
        else
        	woc_hash_="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
	woc_jq_GET "/block/$woc_hash_/header"
}

woc_headers(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/block/headers"
}

woc_txhash(){
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        if [[ -p "/dev/stdin" ]]; then
                woc_hash_="$(cat)"
        else
                woc_hash_="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        txHash=$(woc_curl_GET "/tx/hash/$woc_hash_")
        jq<<<"$txHash"
        truncateCheck=$(jq<<<"$txHash" | grep '"isTruncated": true' | awk '{ print $2 }')
        if [[ "$truncateCheck" == "true" ]]; then echo $'\n'"Output is Truncated. Use:"$'\n'"woc_rawtxout $1"$'\n'; return; fi
        if [[ -z "$txHash" ]]; then echo "Transaction hash not found. try:"$'\n'"woc_txhash $1 test"$'\n'"or"$'\n'"woc_txhash $1 stn"; return; fi
}

woc_broadcast(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/tx/raw" \
                --header "Content-Type: application/json" \
                --data "{\"txhex\": \"$1\" }"
}

woc_bulk(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/txs" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1"] }")
}

woc_bulktxstatus(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/txs/status" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1" ] }")
}

woc_decode(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/tx/decode" \
                --header "Content-Type: application/json" \
                --data "{\"txhex\": \"$1\" }")
}

woc_receipt(){
	[[ -z "$1" ]] && echo "missing input!" && return
        read -r -p "What do you want to name the receipt?"$'\n>' name
        curl -s --location --request GET  "https://main.whatsonchain.com/receipt/$1" > "$name".pdf
}

woc_hex(){
        if [[ -p "/dev/stdin" ]]; then
                woc_hash_="$(cat)"
        else
   	     	woc_hash_="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        woc_curl_GET "/tx/$woc_hash_/hex"
}

woc_bulkhex(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/txs/hex" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1" ] }")
}

woc_rawtxout(){
        woc_net_=main
        [[ "$3" == "test" ]] && woc_net_=test
        [[ "$3" == "stn" ]] && woc_net_=stn
        if [[ -p "/dev/stdin" ]]; then
                woc_hash_="$(cat)"
        else
        	woc_hash_="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        voutCount=0; if [[ -n "$2" ]]; then voutCount="$2"; fi
        woc_curl_GET "/tx/$woc_hash_/out/$voutCount/hex"
}

woc_merkleproof(){
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        if [[ -p "/dev/stdin" ]]; then
                woc_hash_="$(cat)"
        else
                woc_hash_="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
	woc_jq_GET "/tx/$woc_hash_/proof"
}

woc_mempoolinfo(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/mempool/info"
}

woc_mempoolraw(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/mempool/raw"
}

woc_addressinfo(){
        if [[ -p "/dev/stdin" ]]; then
                bsv_address="$(cat)"
        else
                bsv_address="$1"
                if [[ -z "$1" ]]; then
                        echo "provide an address as \$1"
                        return
                fi
        fi
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/address/$bsv_address/info"
}

woc_addressbalance(){
	[[ -z "$1" ]] && echo "missing input!" && return
	woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/address/$1/balance"
}

woc_bulkbalance(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/addresses/balance" \
                --header "Content-Type: application/json" \
                --data "{\"addresses\" : ["$1" ] }")
}

woc_addresshistory(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/address/$1/history"
}

woc_unspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/address/$1/unspent"
}

woc_bulkunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/addresses/unspent" \
                --header "Content-Type: application/json" \
                --data "{\"addresses\" : ["$1" ] }")
}

woc_statement(){
	[[ -z "$1" ]] && echo "missing input!" && return
        read -r -p "What do you want to name the statement?"$'\n>' name
        curl -s --location --request GET "https://main.whatsonchain.com/statement/$1" > "$name".pdf
}

woc_scripthistory(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/script/$1/history"
}

woc_scriptunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
	woc_jq_GET "/script/$1/unspent"
}

woc_bulkscriptunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        woc_net_=main
        [[ "$2" == "test" ]] && woc_net_=test
        [[ "$2" == "stn" ]] && woc_net_=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$woc_net_/scripts/unspent" \
                --header "Content-Type: application/json" \
                --data "{\"scripts\" : ["$1" ] }")
}

woc_exchangerate(){
        jq<<<$(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/main/exchangerate")
}

woc_usd(){
        currency=$(woc_exchangerate | jq .currency)
        rate=$(woc_exchangerate | jq .rate | cut -c -6)
        echo BSV is "$rate" "$currency". $(date) | sed 's/"//g'
}

woc_getlinks(){
	[[ -z "$1" ]] && echo "missing input!" && return
        curl_address1="https://api.whatsonchain.com/v1/bsv/main/search/links"
        curl_address2=" -H 'Content-Type: application/json' -d '{ \"query\": \"$1\" }'"
        curl_address_="${curl_address1}${curl_address2}"
        links=jq<<<"$(curl -s -X POST ${curl_address_})"
        bash<<<"$links"
}

woc_getblockcount(){
        woc_net_=main
        [[ "$1" == "test" ]] && woc_net_=test
        [[ "$1" == "stn" ]] && woc_net_=stn
        woc_info | jq .blocks
}

woc_currentblockinfo(){
        woc_height $(woc_getblockcount)
}

woc_current100tx(){
        woc_currentblockinfo | jq .tx | sed 's/"//g;s/,//g;s/[[]//g;s/[]]//g;/^$/d;s/ //g' | sed 's/null//g' | sed '/^[[:space:]]*$/d'
}

woc_newrandtx(){
        woc_current100tx | shuf -n 1
}

woc_ratecalc(){
        if [[ -p "/dev/stdin" ]]; then
                bsv_amount="$(cat)"
        else
                bsv_amount="$1"
                if [[ -z "$1" ]]; then
                        echo "provide a bsv amount as \$1"
                        return
                fi
        fi
        theRate=$(curl -s https://api.whatsonchain.com/v1/bsv/main/exchangerate | jq -r .rate)
        echo "$theRate * $bsv_amount" | bc
}

woc_lastblocktime(){
	current_unix_time=$(date +%s)
	last_block_time=$(woc_getblockcount | woc_height | jq .time | awk NR==1)
	distance_in_seconds=$(echo "$current_unix_time - $last_block_time" | bc)
	if [[ $1 == "-h" ]]; then
		echo "$(echo "$distance_in_seconds / 60" | bc) minutes since last bsv block"
	else
		echo $distance_in_seconds
	fi
}

woc_read_coinbase(){
	woc_blockhash $1 \
		| jq .coinbaseTx.vin \
		| jq -r .[].coinbase \
		| xxd -r -p \
		| strings -7
}
