#!/usr/bin/env bash

# Bash functions for the WhatsOnChain API
# Use at your own risk
# https://developers.whatsonchain.com/#introduction

# $ wget https://raw.githubusercontent.com/bitsko/Whats-On-Chain-API-for-Bash/main/.woc_functions_test

# add these functions to your shell session by typing:
# $ source .woc_functions_test

# give them persistence by sourcing them in .bashrc
# if [ -f ~/.woc_functions ]; then
#    . ~/.woc_functions
# fi

# after sourcing the functions, print the message below with"
# $ woc

woc(){
cat << WHATSONCHAINFORBASH
https://developers.whatsonchain.com/
Whats On Chain

      #####         #####  ,,,,,,,,,,,,,,,   #################
    ######          ######  ,,,,,,,,,,,,,  #####################
   #####              ##### ,,,,,,,,,,,,, #######################
  #####              ,,, ###             ### ,,,             ####
  #####      ####   ,,,, ###             ### ,,,,
  #####      ####   ,,,, ###             ### ,,,,
   #####     ####    ,,,, #               # ,,,,             ####
    ################# ,,,,,,,,,,,,,,,,,,,,,,,,,, ################
     #################  ,,,,,,,,,,,,,,,,,,,,,,, ################
       #################  ,,,,,,,,,,,,,,,,,,,  ###############

woc_info - Retrieves information about the state of the chain for the selected network
woc_circulatingsupply - Retrieves the circulating supply of BSV
woc_tips - Retrieves information about all known tips in the block tree
woc_blockhash - Retrieves the block details of a given hash
woc_height - Retrieves the block details of a given block height
woc_getblockcount - Posts the current block number
woc_currentblockinfo - Retrieves the block details of the current block
woc_pages - Get pages of transactions from a block
woc_headerbyhash - Retrieves the block header details of a given hash
woc_headers - Retrieves the last 10 block headers
woc_txhash - Retrieves the transaction details for a given transaction hash
woc_broadcast - Broadcast a transaction
woc_bulk - Fetch details for multiple transactions in single request (20 max)
woc_bulktxstatus - Get multiple transactions status in a single request (20 max)
woc_decode - Decode raw transaction with json in response or error msg from node
woc_receipt - Download transaction receipt (PDF)
woc_hex - Returns raw hex for the transaction with given hash
woc_bulkhex - Get multiple transactions raw data in hex in a single request (20 max)
woc_merkleproof - Returns the merkle branch for a confirmed transaction
woc_mempoolinfo - Retrieves various info about the node's mempool for the selected network
woc_mempoolraw - Retrieve a list of transaction ids from the node's mempool for the selected network
woc_addressinfo - Retrieves various address info
woc_addressbalance - Retrieves the confirmed and unconfirmed address balance
woc_bulkbalance - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)
woc_addresshistory - Retrieves confirmed and unconfirmed address transactions
woc_unspent - Retrieves ordered list of UTXOs
woc_bulkunspent - Fetch UTXOs for multiple addresses in a single request (20 max)
woc_statement - Download address statement (PDF)
woc_scripthistory - Retrieves confirmed and unconfirmed script transactions
woc_scriptunspent - This endpoint retrieves ordered list of UTXOs
woc_bulkscriptunspent - Fetch UTXOs for multiple scripts in a single request (20 max)
woc_exchangerate - This endpoint provides exchange rate for BSV
woc_usd - Retrieves the USD price of BSV and posts the date
woc_getlinks - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links
woc_help - Examples of use
woc_newrandtx
woc_current100tx
woc_ratecalc
woc_currentblockinfo
WHATSONCHAINFORBASH
}

woc_help(){
cat << WOCHELP
### WHATS ON CHAIN FOR BASH HELP DOC ###
woc_info - Retrieves information about the state of the chain for the selected network

Examples:
woc_info
woc_info test
woc_info stn

woc_circulatingsupply - Retrieves the circulating supply of BSV

Example:
woc_circulatingsupply

woc_tips - Retrieves information about all known tips in the block tree

Example:
woc_tips
woc_tips stn

woc_blockhash - Retrieves the block details of a given hash

Example:
woc_blockhash 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

woc_height - Retrieves the block details of a given block height

Examples:
woc_height 0
woc_height 1 stn

woc_getblockcount - Retrieves the current block height

Example:
woc_getblockcount

woc_currentblockinfo - Retrieves the block details of the current block height

Example:
woc_currentblockinfo

woc_pages - Get pages of transactions from a block

Example:
woc_pages 000000000000000000885a4d8e9912f085b42288adc58b3ee5830a7da9f4fef4 2

woc_headerbyhash - Retrieves the block header details of a given hash

Example:
woc_headerbyhash 00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048
woc_headerbyhash 000000000556e364bb9bb45adf587734ed1becd48a8978ad700f8344cf72481c stn

woc_headers - Retrieves the last 10 block headers

Example:
woc_headers
woc_headers test

woc_txhash - Retrieves the transaction details for a given transaction hash

Example:
woc_txhash 0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098
woc_txhash 72c6c856d7a1cf34889be3aa13160d0ab2335236420e944099fefe180172f4aa stn

woc_broadcast - Broadcast a transaction

Example:
woc_broadcast 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000

woc_bulk - Fetch details for multiple transactions in single request (20 max)

Example:
woc_bulk \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"

woc_bulktxstatus - Get multiple transactions status in a single request (20 max)

Example:
woc_bulktxstatus \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"

woc_decode - Decode raw transaction with json in response or error msg from node

Example:
woc_decode 0100000001484d40d45b9ea0d652fca8258ab7caa42541eb52975857f96fb50cd732c8b481000000008a47304402202cb265bf10707bf49346c3515dd3d16fc454618c58ec0a0ff448a676c54ff71302206c6624d762a1fcef4618284ead8f08678ac05b13c84235f1654e6ad168233e8201410414e301b2328f17442c0b8310d787bf3d8a404cfbd0704f135b6ad4b2d3ee751310f981926e53a6e8c39bd7d3fefd576c543cce493cbac06388f2651d1aacbfcdffffffff0162640100000000001976a914c8e90996c7c6080ee06284600c684ed904d14c5c88ac00000000

woc_receipt - Download transaction receipt (PDF)

Example:
woc_receipt 3c7478a74b180cb4784e86d33d40b48968898ee15851dd133e46e04038c9b963

woc_hex - Returns raw hex for the transaction with given hash

Example:
woc_hex 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa

woc_bulkhex - Get multiple transactions raw data in hex in a single request (20 max)

Example:
woc_bulkhex \"294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa\",\"91f68c2c598bc73812dd32d60ab67005eac498bef5f0c45b822b3c9468ba3258\"

woc_merkleproof - Returns the merkle branch for a confirmed transaction

Example:
woc_merkleproof 294cd1ebd5689fdee03509f92c32184c0f52f037d4046af250229b97e0c8f1aa

woc_mempoolinfo - Retrieves various info about the node's mempool for the selected network

Example:
woc_mempoolinfo
woc_mempoolinfo test

woc_mempoolraw - Retrieve a list of transaction ids from the node's mempool for the selected network

Example:
woc_mempoolraw
woc_mempoolraw test

woc_addressinfo - Retrieves various address info

Example:
woc_addressinfo 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_addressinfo n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn

woc_addressbalance - Retrieves the confirmed and unconfirmed address balance

Example:
woc_addressbalance 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_addressbalance n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn

woc_bulkbalance - Fetch confirmed and unconfirmed balance for multiple addresses in a single request (20 max)

Example:
woc_bulkbalance \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"

woc_addresshistory - Retrieves confirmed and unconfirmed address transactions

Example:
woc_addresshistory 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX
woc_addresshistory n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn

woc_unspent - Retrieves ordered list of UTXOs

Example:
woc_unspent 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
woc_unspent n4ioKcJWq8LwxMCyUGSyk8H8MMrMKVCKmK stn

woc_bulkunspent - Fetch UTXOs for multiple addresses in a single request (20 max)

Example:
woc_bulkunspent \"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX\",\"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1\"

woc_statement - Download address statement (PDF)

Example:
woc_statement 12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX

woc_scripthistory - Retrieves confirmed and unconfirmed script transactions

Example:
woc_scripthistory f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7

woc_scriptunspent - This endpoint retrieves ordered list of UTXOs

Example:
woc_scriptunspent f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7

woc_bulkscriptunspent - Fetch UTXOs for multiple scripts in a single request (20 max)

Example:
woc_bulkscriptunspent \"f814a7c3a40164aacc440871e8b7b14eb6a45f0ca7dcbeaea709edc83274c5e7\",\"995ea8d0f752f41cdd99bb9d54cb004709e04c7dc4088bcbbbb9ea5c390a43c3\"

woc_exchangerate - This endpoint provides exchange rate for BSV

Example:
woc_exchangerate

woc_usd - Retrieves the USD price of BSV and posts the date

Example:
woc_usd 

woc_getlinks - Identifies whether the posted query text is a block hash, txid or address and responds with WoC links

Example:
woc_getlinks 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
WOCHELP
}
##############################################################################################################################

curl_GET(){
        curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/${net}${1}"
}

woc_helper(){
        woc_help | less
}

woc_jqcheck(){
        jq --version
        command -v jq >/dev/null 2>&1 || { echo >&2 "please install jq"
                return
        }
}

#########################################
woc_info(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/chain/info"); }

woc_circulatingsupply(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        curl_GET "/circulatingsupply"; }

woc_tips(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/chain/tips"); }

woc_blockhash(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/block/hash/$1"); }

woc_height(){
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        if [[ -p "/dev/stdin" ]]; then height="$(cat)"; else
                height="$1"
                if [[ -z "$1" ]]; then echo "provide a height as \$1 or pipe in a height"; return; fi; fi
        wocHeight=$(curl_GET "/block/height/$height")
        echo "$wocHeight" | jq
        truncateCheck=$(echo "$wocHeight" | jq | grep '"isTruncated": true' | awk '{ print $2 }')
        if [[ "$truncateCheck" == "true" ]]; then echo $'\n'"Output is Truncated."$'\n'; return; fi
                txcount="$(jq .txcount<<<$wocHeight)"
        if [[ $(jq .tx<<<"$wocHeight" | wc -l) == 102 ]] && [[ "$txcount" != 100 ]]; then
                echo "{\"tx_isTruncated\": \"true\"}"; return; fi
        if [[ -z "$wocHeight" ]]; then echo "Block not found. Chain is $(woc_info | jq .blocks) blocks long"; return; fi
}

woc_pages(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$3" == "test" ]] && net=test
        [[ "$3" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/block/hash/$1/page/$2")
}

woc_headerbyhash(){
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        if [[ -p "/dev/stdin" ]]; then
                hash="$(cat)"
        else
        	hash="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        jq<<<$(curl_GET "/block/$hash/header"); }

woc_headers(){ 
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/block/headers"); }

woc_txhash(){
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        if [[ -p "/dev/stdin" ]]; then
                hash="$(cat)"
        else
                hash="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        txHash=$(curl_GET "/tx/hash/$hash")
        jq<<<"$txHash"
        truncateCheck=$(jq<<<"$txHash" | grep '"isTruncated": true' | awk '{ print $2 }')
        if [[ "$truncateCheck" == "true" ]]; then echo $'\n'"Output is Truncated. Use:"$'\n'"woc_rawtxout $1"$'\n'; return; fi
        if [[ -z "$txHash" ]]; then echo "Transaction hash not found. try:"$'\n'"woc_txhash $1 test"$'\n'"or"$'\n'"woc_txhash $1 stn"; return; fi
}

woc_broadcast(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/tx/raw" \
                --header "Content-Type: application/json" \
                --data "{\"txhex\": \"$1\" }"
}

woc_bulk(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1"] }")
}

woc_bulktxstatus(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs/status" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1" ] }")
}

woc_decode(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/tx/decode" \
                --header "Content-Type: application/json" \
                --data "{\"txhex\": \"$1\" }")
}

woc_receipt(){
	[[ -z "$1" ]] && echo "missing input!" && return
        read -r -p "What do you want to name the receipt?"$'\n>' name
        curl -s --location --request GET  "https://main.whatsonchain.com/receipt/$1" > "$name".pdf
}

woc_hex(){
        if [[ -p "/dev/stdin" ]]; then
                hash="$(cat)"
        else
   	     	hash="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        curl_GET "/tx/$hash/hex"
}

woc_bulkhex(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/txs/hex" \
                --header "Content-Type: application/json" \
                --data "{\"txids\" : ["$1" ] }")
}

woc_rawtxout(){
        net=main
        [[ "$3" == "test" ]] && net=test
        [[ "$3" == "stn" ]] && net=stn
        if [[ -p "/dev/stdin" ]]; then
                hash="$(cat)"
        else
        	hash="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        voutCount=0; if [[ -n "$2" ]]; then voutCount="$2"; fi
        curl_GET "/tx/$hash/out/$voutCount/hex"
}

woc_merkleproof(){
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        if [[ -p "/dev/stdin" ]]; then
                hash="$(cat)"
        else
                hash="$1"
		[[ -z "$1" ]] && echo "provide a hash as \$1 or pipe in a hash" && return
        fi
        jq<<<$(curl_GET "/tx/$hash/proof")
}

woc_mempoolinfo(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/mempool/info"); }

woc_mempoolraw(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/mempool/raw"); }

woc_addressinfo(){
        if [[ -p "/dev/stdin" ]]; then
                bsv_address="$(cat)"
        else
                bsv_address="$1"
                if [[ -z "$1" ]]; then
                        echo "provide an address as \$1"
                        return
                fi
        fi
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/address/$bsv_address/info"); }

woc_addressbalance(){
	[[ -z "$1" ]] && echo "missing input!" && return
	net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/address/$1/balance")
}

woc_bulkbalance(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/addresses/balance" \
                --header "Content-Type: application/json" \
                --data "{\"addresses\" : ["$1" ] }")
}

woc_addresshistory(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/address/$1/history")
}

woc_unspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/address/$1/unspent")
}

woc_bulkunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/addresses/unspent" \
                --header "Content-Type: application/json" \
                --data "{\"addresses\" : ["$1" ] }")
}

woc_statement(){
	[[ -z "$1" ]] && echo "missing input!" && return
        read -r -p "What do you want to name the statement?"$'\n>' name
        curl -s --location --request GET "https://main.whatsonchain.com/statement/$1" > "$name".pdf
}

woc_scripthistory(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/script/$1/history")
}

woc_scriptunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl_GET "/script/$1/unspent")
}

woc_bulkscriptunspent(){
	[[ -z "$1" ]] && echo "missing input!" && return
        net=main
        [[ "$2" == "test" ]] && net=test
        [[ "$2" == "stn" ]] && net=stn
        jq<<<$(curl -s --location --request POST "https://api.whatsonchain.com/v1/bsv/$net/scripts/unspent" \
                --header "Content-Type: application/json" \
                --data "{\"scripts\" : ["$1" ] }")
}

woc_exchangerate(){
        jq<<<$(curl -s --location --request GET "https://api.whatsonchain.com/v1/bsv/main/exchangerate")
}

woc_usd(){
        currency=$(woc_exchangerate | jq .currency)
        rate=$(woc_exchangerate | jq .rate | cut -c -6)
        echo BSV is "$rate" "$currency". $(date) | sed 's/"//g'
}

woc_getlinks(){
	[[ -z "$1" ]] && echo "missing input!" && return
        curl_address1="https://api.whatsonchain.com/v1/bsv/main/search/links"
        curl_address2=" -H 'Content-Type: application/json' -d '{ \"query\": \"$1\" }'"
        curl_address_="${curl_address1}${curl_address2}"
        links=jq<<<"$(curl -s -X POST ${curl_address_})"
        bash<<<"$links"; }

woc_getblockcount(){
        net=main
        [[ "$1" == "test" ]] && net=test
        [[ "$1" == "stn" ]] && net=stn
        woc_info | jq .blocks
}

woc_currentblockinfo(){
        woc_height $(woc_getblockcount)
}

woc_current100tx(){
        woc_currentblockinfo | jq .tx | sed 's/"//g;s/,//g;s/[[]//g;s/[]]//g;/^$/d;s/ //g'
}

woc_newrandtx(){
        woc_current100tx | shuf -n 1
}

woc_ratecalc() {
        if [[ -p "/dev/stdin" ]]; then
                bsv_amount="$(cat)"
        else
                bsv_amount="$1"
                if [[ -z "$1" ]]; then
                        echo "provide a bsv amount as \$1"
                        return
                fi
        fi
        theRate=$(curl -s https://api.whatsonchain.com/v1/bsv/main/exchangerate | jq -r .rate)
        echo "$theRate * $bsv_amount" | bc
}
